{"version":3,"sources":["useLogic.js","App.js","index.js"],"names":["useLogic","START_TIME","useState","timeRemaining","setTimeRemaining","timeIsRunning","setTimeIsRunning","wordCount","setWordCount","formik","useFormik","initialValues","text","onSubmit","values","console","log","inputRef","useRef","useEffect","setTimeout","time","endGame","trim","split","filter","word","length","startGame","current","disabled","focus","App","class","handleSubmit","name","onChange","handleChange","value","ref","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAuDeA,MApDf,SAAkBC,GAAa,IAAD,EACeC,mBAASD,GADxB,mBACrBE,EADqB,KACNC,EADM,OAEeF,oBAAS,GAFxB,mBAErBG,EAFqB,KAENC,EAFM,OAGOJ,mBAAS,GAHhB,mBAGrBK,EAHqB,KAGVC,EAHU,KAKvBC,EAASC,YAAU,CACxBC,cAAe,CACdC,KAAM,IAEPC,SAAU,SAACC,GACVC,QAAQC,IAAIF,MAIRG,EAAWC,iBAAO,MAExBC,qBACC,WACKd,GAAiBF,EAAgB,EACpCiB,YAAW,WACVhB,GAAiB,SAACiB,GAAD,OAAUA,EAAO,OAChC,KACyB,IAAlBlB,GACVmB,MAGF,CAAEnB,EAAeE,IAGlB,IAeMiB,EAAU,WACfhB,GAAiB,GACjBE,EAAgCC,EAAOK,OAAOF,KAhB1BW,OAAOC,MAAM,KACHC,QAAO,SAACC,GAAD,MAAmB,KAATA,KAAaC,SAkB7D,MAAO,CAAElB,SAAQJ,gBAAeY,WAAUW,UAdxB,WACjBtB,GAAiB,GACjBF,EAAiBH,GACjBQ,EAAOK,OAAOF,KAAO,GACrBJ,EAAa,GACbS,EAASY,QAAQC,UAAW,EAC5Bb,EAASY,QAAQE,SAQmCxB,YAAWJ,kB,MCvBlD6B,MAzBf,WAAgB,IAAD,EACmEhC,EAAS,IAAlFS,EADM,EACNA,OAAQJ,EADF,EACEA,cAAeY,EADjB,EACiBA,SAAUW,EAD3B,EAC2BA,UAAWrB,EADtC,EACsCA,UAAWJ,EADjD,EACiDA,cAE/D,OACC,yBAAK8B,MAAM,aACV,0BAAMpB,SAAUJ,EAAOyB,cACtB,sDACA,8BACCC,KAAK,OACLC,SAAU3B,EAAO4B,aACjBC,MAAO7B,EAAOK,OAAOF,KACrBkB,UAAWzB,EACXkC,IAAKtB,IAEN,uDAAyBd,IACzB,4BAAQqC,QAASZ,EAAWE,SAAUzB,GAAtC,SAGA,kDAAoBE,IACpB,wDCnBJkC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,W","file":"static/js/main.d182ee0e.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useFormik } from 'formik';\n\nfunction useLogic(START_TIME) {\n\tconst [ timeRemaining, setTimeRemaining ] = useState(START_TIME);\n\tconst [ timeIsRunning, setTimeIsRunning ] = useState(false);\n\tconst [ wordCount, setWordCount ] = useState(0);\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\ttext: ''\n\t\t},\n\t\tonSubmit: (values) => {\n\t\t\tconsole.log(values);\n\t\t}\n\t});\n\n\tconst inputRef = useRef(null);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (timeIsRunning && timeRemaining > 0) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetTimeRemaining((time) => time - 1);\n\t\t\t\t}, 1000);\n\t\t\t} else if (timeRemaining === 0) {\n\t\t\t\tendGame();\n\t\t\t}\n\t\t},\n\t\t[ timeRemaining, timeIsRunning ]\n\t);\n\n\tconst calculateWordCount = (str) => {\n\t\tlet wordArray = str.trim().split(' ');\n\t\tlet filteredWords = wordArray.filter((word) => word !== '').length;\n\t\treturn filteredWords;\n\t};\n\n\tconst startGame = () => {\n\t\tsetTimeIsRunning(true);\n\t\tsetTimeRemaining(START_TIME);\n\t\tformik.values.text = '';\n\t\tsetWordCount(0);\n\t\tinputRef.current.disabled = false; // this line of code is needed to fix the bug\n\t\tinputRef.current.focus();\n\t};\n\n\tconst endGame = () => {\n\t\tsetTimeIsRunning(false);\n\t\tsetWordCount(calculateWordCount(formik.values.text));\n\t};\n\n\treturn { formik, timeIsRunning, inputRef, startGame, wordCount, timeRemaining };\n}\n\nexport default useLogic;\n","import React from 'react';\nimport useLogic from './useLogic';\nimport './styles.css';\n\nfunction App() {\n\tconst { formik, timeIsRunning, inputRef, startGame, wordCount, timeRemaining } = useLogic(30);\n\n\treturn (\n\t\t<div class=\"container\">\n\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t<h1>How fast can you type?</h1>\n\t\t\t\t<textarea\n\t\t\t\t\tname=\"text\"\n\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\tvalue={formik.values.text}\n\t\t\t\t\tdisabled={!timeIsRunning}\n\t\t\t\t\tref={inputRef}\n\t\t\t\t/>\n\t\t\t\t<h4>{`Time remaining : ${timeRemaining}`}</h4>\n\t\t\t\t<button onClick={startGame} disabled={timeIsRunning}>\n\t\t\t\t\tStart\n\t\t\t\t</button>\n\t\t\t\t<h1>{`word count: ${wordCount}`}</h1>\n\t\t\t\t<p>powered by jarryingnut</p>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n/* const formik = useFormik({\n\t\tinitialValues: {\n\t\t\ttext: ''\n\t\t},\n\t\tonSubmit: (values) => {\n\t\t\tconsole.log(values);\n\t\t}\n\t})\n\t\t<form onSubmit={formik.handleSubmit}>\n\t\t<h1>How fast can you type?</h1>\n\t\t<textarea name=\"text\" onChange={formik.handleChange} value={formik.values.text} />\n\t\t<h4>Time Remaining : </h4>\n\t\t<button type=\"submit\">Start</button>\n\n\t\t\n\t</form>\n\t<Formik initialValues={{ text: '' }} onSubmit={(data) => console.log(data)}>\n\t\t\t\t{({ values, handleChange, handleSubmit }) => (\n\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t<h1>How fast can you type?</h1>\n\t\t\t\t\t\t<textarea name=\"text\" onChange={handleChange} value={values.text} disabled={!timeIsRunning} />\n\t\t\t\t\t\t<h4>{`Time Remaining : ${timeRemaining}`}</h4>\n\t\t\t\t\t\t<button onClick={startButton}>Start</button>\n\t\t\t\t\t\t<h1>{`word count ${wordCount}`}</h1>\n\t\t\t\t\t</form>\n\t\t\t\t)}\n\t\t\t</Formik>\n\t\n\t\n\t*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}